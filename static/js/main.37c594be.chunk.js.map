{"version":3,"sources":["assets/images/turtle.svg","styles/GlobalStyle.ts","styles/constants.ts","components/Turtle/Turtle.tsx","styles/color.ts","components/TextInput/TextInput.tsx","components/Button/Button.tsx","styles/device.ts","routes/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GlobalStyle","createGlobalStyle","Turtle","className","src","turtle","alt","color","textBlack","textGray","green","darkGreen","Container","styled","div","Input","input","Label","label","TextInput","id","placeholder","maxLength","onChange","useState","uuid","inputId","type","htmlFor","Btn","button","Button","children","onClick","defaultProps","breakpoint","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","commonStyles","css","TurtlePure","TextInputPure","Buttons","hidden","Home","areButtonsVisible","setAreButtonsVisible","onNicknameChange","useCallback","currentTarget","value","length","console","log","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37c594be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/turtle.423911c4.svg\";","import { createGlobalStyle } from 'styled-components/macro';\nimport { BASE_FONT_SIZE } from './constants';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: #8b8b8b;\n    background-color: #e3e3e3;\n\n    font-size: ${BASE_FONT_SIZE}px;\n    min-width: 300px;\n  }\n`;\n\nexport default GlobalStyle;\n","export const BOARD_WIDTH = {\n  mobileS: '100vw',\n  mobileM: '100vw',\n  mobileL: '100vw',\n  tablet: '100vw',\n  laptop: '100vw',\n  laptopL: '100vw',\n  desktop: '100vw',\n};\n\nexport const BASE_FONT_SIZE = 26;\n","import React from 'react';\nimport turtle from 'assets/images/turtle.svg';\n\nconst Turtle: React.FC<{ className?: string }> = ({ className }) => (\n  <img src={turtle} alt=\"turtle-logo\" className={className} />\n);\n\nexport default Turtle;\n","const color: { [name: string]: string } = {\n  textBlack: 'black',\n  textGray: '#484848',\n  green: '#00ff1a',\n  darkGreen: '#00a611',\n};\n\nexport default color;\n","import React, { useState } from 'react';\nimport styled from 'styled-components/macro';\nimport uuid from 'uuid';\n\nimport color from 'styles/color';\nimport device from 'styles/device';\n\ninterface Props {\n  className?: string;\n  id?: string;\n  label: string;\n  maxLength?: number;\n  placeholder: string;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst padding = '0.7em';\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  margin-top: 1.1em;\n  padding: ${padding};\n  border: 1px solid black;\n  border-radius: 0.2em;\n  background-color: white;\n  font-size: 1em;\n  transition: border-color 250ms ease-out, box-shadow 250ms ease-out;\n\n  :focus {\n    border-color: ${color.green};\n    box-shadow: 0 0 0.3em 0 rgba(0, 0, 0, 0.4);\n  }\n`;\n\nconst Label = styled.label`\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding-left: ${padding};\n  z-index: -1;\n  opacity: 0;\n  transform: translateY(150%);\n  transition: transform 300ms, opacity 200ms;\n  font-size: 0.65em;\n  color: ${color.textGray};\n\n  ${Input}:not(:placeholder-shown) + & {\n    transform: translateY(0);\n    opacity: 1;\n  }\n`;\n\nconst TextInput: React.FC<Props> = ({ className, id, placeholder, label, maxLength, onChange }) => {\n  const [inputId] = useState<string>(id || uuid());\n\n  return (\n    <Container className={className}>\n      <Input\n        type=\"text\"\n        id={inputId}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        onChange={onChange}\n      />\n      <Label htmlFor={id}>{label}</Label>\n    </Container>\n  );\n};\n\nexport default TextInput;\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\ninterface Props {\n  type?: 'submit' | 'button' | 'reset';\n  onClick?: () => void;\n}\n\nconst Btn = styled.button`\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  font: inherit;\n  background-color: transparent;\n  cursor: pointer;\n  border: none;\n\n  color: #ffffff;\n  background-color: #9555af;\n  padding: 0.5em;\n  font-size: 1em;\n  opacity: 1;\n\n  :hover {\n    opacity: 0.7;\n  }\n`;\n\nconst Button: React.FC<Props> = ({ children, type, onClick }) => {\n  // eslint-disable-next-line react/button-has-type\n  return (\n    <Btn type={type} onClick={onClick}>\n      {children}\n    </Btn>\n  );\n};\n\nButton.defaultProps = {\n  type: 'submit',\n};\n\nexport default Button;\n","export const breakpoint = {\n  mobileS: '320px',\n  mobileM: '375px',\n  mobileL: '425px',\n  tablet: '768px',\n  laptop: '1024px',\n  laptopL: '1440px',\n  desktop: '2560px',\n};\n\nconst device = {\n  mobileS: `(min-width: ${breakpoint.mobileS})`,\n  mobileM: `(min-width: ${breakpoint.mobileM})`,\n  mobileL: `(min-width: ${breakpoint.mobileL})`,\n  tablet: `(min-width: ${breakpoint.tablet})`,\n  laptop: `(min-width: ${breakpoint.laptop})`,\n  laptopL: `(min-width: ${breakpoint.laptopL})`,\n  desktop: `(min-width: ${breakpoint.desktop})`,\n  desktopL: `(min-width: ${breakpoint.desktop})`,\n};\n\nexport default device;\n","import React, { useState, useCallback } from 'react';\nimport styled, { css } from 'styled-components/macro';\n\nimport TurtlePure from 'components/Turtle';\nimport TextInputPure from 'components/TextInput';\nimport Button from 'components/Button';\n\nimport device, { breakpoint } from 'styles/device';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nconst commonStyles = css`\n  width: 90vw;\n  margin-bottom: 0.4em;\n\n  @media ${device.mobileL} {\n    width: calc(${breakpoint.mobileL} * 0.9);\n    margin-bottom: 1em;\n  }\n`;\n\nconst Turtle = styled(TurtlePure)`\n  ${commonStyles}\n`;\n\nconst TextInput = styled(TextInputPure)`\n  ${commonStyles}\n\n  z-index: 1;\n`;\n\nconst Buttons = styled.div<{ hidden?: boolean }>`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  width: 90vw;\n  transition: opacity 300ms ease-out 400ms;\n  transform: translateY(0);\n\n  ${({ hidden }) =>\n    hidden &&\n    css`\n      opacity: 0;\n    `}\n\n\n  @media ${device.mobileL} {\n    flex-direction: row;\n    transition: 300ms ease-out;\n    width: calc(${breakpoint.mobileL} * 0.9);\n\n    ${({ hidden }) =>\n      hidden &&\n      css`\n        transform: translateY(-150%);\n      `}\n  }\n`;\n\nconst Home: React.FC = () => {\n  const [areButtonsVisible, setAreButtonsVisible] = useState(false);\n\n  const onNicknameChange = useCallback(\n    ({ currentTarget }) => {\n      if (currentTarget.value.length >= 3 && !areButtonsVisible) {\n        setAreButtonsVisible(true);\n      } else if (currentTarget.value.length < 3 && areButtonsVisible) {\n        setAreButtonsVisible(false);\n      }\n    },\n    [areButtonsVisible]\n  );\n\n  return (\n    <Container>\n      <Turtle />\n      <TextInput\n        label=\"Nickname (min 3 chars):\"\n        placeholder=\"Choose your nickname\"\n        maxLength={20}\n        onChange={onNicknameChange}\n      />\n      <Buttons hidden={!areButtonsVisible}>\n        <Button\n          onClick={() => {\n            console.log('click');\n          }}\n        >\n          New Game\n        </Button>\n        <Button>Find Game</Button>\n      </Buttons>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport GlobalStyle from 'styles/GlobalStyle';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Home from 'routes/Home';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}