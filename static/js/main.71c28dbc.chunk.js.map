{"version":3,"sources":["assets/images/turtle.svg","styles/GlobalStyle.ts","styles/constants.ts","components/Turtle/Turtle.tsx","styles/color.ts","components/TextInput/TextInput.tsx","components/Spinner/Spinner.tsx","components/Button/Button.tsx","styles/device.ts","routes/Home/Home.tsx","routes/Games/components/GamesList/GamesList.tsx","routes/Games/components/GamesListItem/GamesListItem.tsx","routes/Games/Games.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GlobalStyle","createGlobalStyle","Turtle","className","src","turtle","alt","color","textBlack","textGray","textLightGray","green","lightGreen","darkGreen","purple","backgroundWhite","lightPink","Container","styled","div","Input","input","Label","label","TextInput","disabled","id","maxLength","onChange","placeholder","useState","uuid","inputId","type","htmlFor","spin","keyframes","show","span","Circle","Spinner","Btn","button","big","css","ChildrenContainer","isLoading","Button","children","onClick","defaultProps","breakpoint","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","commonStyles","TurtlePure","TextInputPure","Buttons","hidden","ButtonWithMargin","Home","history","useHistory","areButtonsDisabled","setAreButtonsDisabled","setIsLoading","onNicknameChange","useCallback","currentTarget","value","length","onSubmit","e","preventDefault","setTimeout","push","GamesList","ul","li","GamesListItem","name","players","map","player","key","items","Array","fill","Games","item","Math","random","Application","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71c28dbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/turtle.423911c4.svg\";","import { createGlobalStyle } from 'styled-components/macro';\nimport { BASE_FONT_SIZE } from './constants';\n\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    font-size: ${BASE_FONT_SIZE}px;\n  }\n\n  body {\n    background-color: #8b8b8b;\n    background-color: #e3e3e3;\n\n    min-width: 300px;\n  }\n`;\n\nexport default GlobalStyle;\n","export const BOARD_WIDTH = {\n  mobileS: '100vw',\n  mobileM: '100vw',\n  mobileL: '100vw',\n  tablet: '100vw',\n  laptop: '100vw',\n  laptopL: '100vw',\n  desktop: '100vw',\n};\n\nexport const BASE_FONT_SIZE = 20;\n","import React from 'react';\nimport turtle from 'assets/images/turtle.svg';\n\nconst Turtle: React.FC<{ className?: string }> = ({ className }) => (\n  <img src={turtle} alt=\"turtle-logo\" className={className} />\n);\n\nexport default Turtle;\n","const color: { [name: string]: string } = {\n  textBlack: 'black',\n  textGray: '#484848',\n  textLightGray: '#707070',\n  green: '#00ff1a',\n  lightGreen: '#e0ffce',\n  darkGreen: '#00a611',\n  purple: '#9555af',\n  backgroundWhite: '#f6f5f5',\n  lightPink: '#fce7ff',\n};\n\nexport default color;\n","import React, { useState } from 'react';\nimport styled from 'styled-components/macro';\nimport uuid from 'uuid';\n\nimport color from 'styles/color';\n\ninterface Props {\n  className?: string;\n  id?: string;\n  label: string;\n  maxLength?: number;\n  placeholder: string;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\n\nconst padding = 0.7;\n\nconst Container = styled.div`\n  position: relative;\n  font-size: 1.2rem;\n`;\n\nconst Input = styled.input`\n  transition: border-color 250ms ease-out, box-shadow 250ms ease-out;\n  width: 100%;\n  margin-top: 1.1em;\n  padding: ${padding}em;\n  border: 0.05em solid black;\n  border-radius: 0.2em;\n  outline: none;\n  background-color: white;\n  font-size: 1em;\n\n  :focus {\n    border-color: ${color.green};\n    box-shadow: 0 0 0.4em 0 rgba(0, 0, 0, 0.4);\n  }\n\n  :disabled {\n    background-color: ${color.lightGreen};\n    color: ${color.textLightGray};\n  }\n`;\n\nconst Label = styled.label`\n  position: absolute;\n  z-index: -1;\n  left: 0;\n  top: 0;\n  opacity: 0;\n  transform: translateY(150%);\n  transition: transform 300ms, opacity 200ms;\n  padding-left: ${padding}em;\n  font-size: 0.65em;\n  color: ${color.textGray};\n\n  ${Input}:not(:placeholder-shown) + & {\n    transform: translateY(0);\n    opacity: 1;\n  }\n`;\n\nconst TextInput: React.FC<Props> = ({\n  className,\n  disabled,\n  id,\n  label,\n  maxLength,\n  onChange,\n  placeholder,\n}) => {\n  const [inputId] = useState<string>(id || uuid());\n\n  return (\n    <Container className={className}>\n      <Input\n        type=\"text\"\n        id={inputId}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        onChange={onChange}\n        disabled={disabled}\n      />\n      <Label htmlFor={id}>{label}</Label>\n    </Container>\n  );\n};\n\nexport default TextInput;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components/macro';\n\ninterface Props {\n  className?: string;\n}\n\nconst spin = keyframes`\n  from {\n    transform: rotate(0);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst show = keyframes`\n  from {\n    transform: scale(0);\n  }\n\n  to {\n    transform: scale(1);\n  }\n`;\n\nconst Container = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  height: 100%;\n  width: 100%;\n`;\n\nconst Circle = styled.span`\n  display: block;\n  width: 1.5em;\n  height: 1.5em;\n  border: 0.15em solid rgba(255, 255, 255, 0.3);\n  border-top-color: white;\n  border-radius: 50%;\n  animation: ${spin} 700ms linear infinite, ${show} 300ms ease-out;\n  transform-origin: 50%;\n`;\n\nconst Spinner: React.FC<Props> = ({ className }) => (\n  <Container>\n    <Circle className={className} />\n  </Container>\n);\n\nexport default Spinner;\n","import React from 'react';\nimport styled, { css } from 'styled-components/macro';\nimport Spinner from 'components/Spinner';\nimport color from 'styles/color';\n\ninterface Props {\n  type?: 'submit' | 'button' | 'reset';\n  onClick?: () => void;\n  disabled?: boolean;\n  isLoading?: boolean;\n  className?: string;\n  big?: boolean;\n}\n\nconst Btn = styled.button<Props>`\n  display: inline-block;\n  position: relative;\n  opacity: 1;\n\n  padding: 0.5em;\n  border: none;\n  border-radius: 0.2em;\n\n  text-align: center;\n  text-decoration: none;\n  font: inherit;\n  font-size: 1rem;\n  color: #ffffff;\n  background-color: ${color.purple};\n\n  :hover:not(:disabled) {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n\n  ${({ big }) =>\n    big &&\n    css`\n      font-size: 1.5rem;\n    `}\n`;\n\nconst ChildrenContainer = styled.span<{ isLoading?: boolean }>`\n  display: block;\n\n  ${({ isLoading }) =>\n    isLoading &&\n    css`\n      visibility: hidden;\n    `}\n`;\n\nconst Button: React.FC<Props> = ({\n  children,\n  type,\n  onClick,\n  disabled,\n  isLoading,\n  className,\n  big,\n}) => (\n  <Btn\n    type={type}\n    onClick={onClick}\n    disabled={disabled || isLoading}\n    isLoading={isLoading}\n    className={className}\n    big={big}\n  >\n    {isLoading && <Spinner />}\n    <ChildrenContainer isLoading={isLoading}>{children}</ChildrenContainer>\n  </Btn>\n);\n\nButton.defaultProps = {\n  type: 'submit',\n};\n\nexport default Button;\n","export const breakpoint = {\n  mobileS: '320px',\n  mobileM: '375px',\n  mobileL: '425px',\n  tablet: '768px',\n  laptop: '1024px',\n  laptopL: '1440px',\n  desktop: '2560px',\n};\n\nconst device = {\n  mobileS: `(min-width: ${breakpoint.mobileS})`,\n  mobileM: `(min-width: ${breakpoint.mobileM})`,\n  mobileL: `(min-width: ${breakpoint.mobileL})`,\n  tablet: `(min-width: ${breakpoint.tablet})`,\n  laptop: `(min-width: ${breakpoint.laptop})`,\n  laptopL: `(min-width: ${breakpoint.laptopL})`,\n  desktop: `(min-width: ${breakpoint.desktop})`,\n  desktopL: `(min-width: ${breakpoint.desktop})`,\n};\n\nexport default device;\n","import React, { useState, useCallback } from 'react';\nimport styled, { css } from 'styled-components/macro';\nimport { useHistory } from 'react-router-dom';\n\nimport TurtlePure from 'components/Turtle';\nimport TextInputPure from 'components/TextInput';\nimport Button from 'components/Button';\n\nimport device, { breakpoint } from 'styles/device';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  font-size: 1.2rem;\n`;\n\nconst commonStyles = css`\n  width: 90vw;\n\n  @media ${device.mobileL} {\n    width: calc(${breakpoint.mobileL} * 0.9);\n    margin-bottom: 1em;\n  }\n`;\n\nconst Turtle = styled(TurtlePure)`\n  ${commonStyles}\n  margin-bottom: 0.4em;\n`;\n\nconst TextInput = styled(TextInputPure)`\n  ${commonStyles}\n  z-index: 1;\n  margin-bottom: 0.8em;\n`;\n\nconst Buttons = styled.div<{ hidden?: boolean }>`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  width: 90vw;\n  transition: opacity 300ms ease-out 400ms;\n  transform: translateY(0);\n\n  ${({ hidden }) =>\n    hidden &&\n    css`\n      opacity: 0;\n    `}\n\n  @media ${device.mobileL} {\n    flex-direction: row;\n    transition: 300ms ease-out;\n    width: calc(${breakpoint.mobileL} * 0.9);\n\n    ${({ hidden }) =>\n      hidden &&\n      css`\n        transform: translateY(-100%);\n      `}\n  }\n`;\n\nconst ButtonWithMargin = styled(Button)`\n  margin-bottom: 0.8em;\n`;\n\nconst Home: React.FC = () => {\n  const history = useHistory();\n  const [areButtonsDisabled, setAreButtonsDisabled] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onNicknameChange = useCallback(\n    ({ currentTarget }) => {\n      if (currentTarget.value.length >= 3 && areButtonsDisabled) {\n        setAreButtonsDisabled(false);\n      } else if (currentTarget.value.length < 3 && !areButtonsDisabled) {\n        setAreButtonsDisabled(true);\n      }\n    },\n    [areButtonsDisabled]\n  );\n\n  return (\n    <Container>\n      <Turtle />\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <TextInput\n          label=\"Nickname (min 3 chars)\"\n          placeholder=\"Choose your nickname\"\n          maxLength={20}\n          onChange={onNicknameChange}\n          disabled={isLoading}\n        />\n        <Buttons hidden={areButtonsDisabled}>\n          <ButtonWithMargin\n            big\n            onClick={() => {\n              setTimeout(() => {\n                history.push('/games');\n              }, 2000);\n              setIsLoading(true);\n            }}\n            disabled={areButtonsDisabled}\n            isLoading={isLoading}\n            type=\"submit\"\n          >\n            New Game\n          </ButtonWithMargin>\n          <ButtonWithMargin\n            big\n            disabled={areButtonsDisabled}\n            type=\"button\"\n            onClick={() => {\n              history.push('/games');\n            }}\n          >\n            Find Game\n          </ButtonWithMargin>\n        </Buttons>\n      </form>\n    </Container>\n  );\n};\n\nexport default Home;\n","import styled from 'styled-components/macro';\n\nconst GamesList = styled.ul`\n  width: 100%;\n`;\n\nexport default GamesList;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport Btn from 'components/Button';\n\nimport color from 'styles/color';\n\ninterface Props {\n  name: string;\n  players: string[];\n}\n\nconst Container = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n\n  font-size: 1rem;\n  padding: 1em;\n  border: 0.05em solid black;\n  border-radius: 0.4em;\n  margin: 0;\n  margin-bottom: 0.4em;\n  background-color: white;\n`;\n\nconst Button = styled(Btn)`\n  width: 5em;\n`;\n\nconst GamesListItem: React.FC<Props> = ({ name, players }) => {\n  return (\n    <Container>\n      <div className=\"name\">{name}</div>\n      {players.map((player) => (\n        <div key={player} className=\"player\">\n          {player}\n        </div>\n      ))}\n      <Button>Join</Button>\n    </Container>\n  );\n};\n\nexport default GamesListItem;\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\nimport device, { breakpoint } from 'styles/device';\n\nimport GamesList from './components/GamesList';\nimport GamesListItem from './components/GamesListItem';\n\nconst Container = styled.div`\n  width: 90vw;\n  height: 100vh;\n\n  @media ${device.laptop} {\n    width: calc(${breakpoint.laptop} * 0.9);\n  }\n`;\n\nconst it = {\n  name: 'Example game',\n  players: ['Pawel', 'Adam', 'Gosia', 'Kasia'],\n};\n\nconst items = Array(20).fill(it);\n\nconst Games: React.FC = () => {\n  return (\n    <Container>\n      <GamesList>\n        {items.map((item) => (\n          <GamesListItem key={Math.random()} name={item.name} players={item.players} />\n        ))}\n      </GamesList>\n    </Container>\n  );\n};\n\nexport default Games;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport GlobalStyle from 'styles/GlobalStyle';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Home from 'routes/Home';\nimport Games from 'routes/Games';\n\nconst Application = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* justify-content: center; */\n  align-items: center;\n  height: 100vh;\n  font-size: 1.2rem;\n`;\n\nconst App: React.FC = () => {\n  return (\n    <Application>\n      <GlobalStyle />\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/games\" component={Games} />\n        </Switch>\n      </Router>\n    </Application>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}